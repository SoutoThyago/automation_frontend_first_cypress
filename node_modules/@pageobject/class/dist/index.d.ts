/**
 * `import {Adapter} from '@pageobject/class';`
 */
export interface Adapter<TElement> {
    click(element: TElement): Promise<void>;
    evaluate<TResult>(script: (...args: any[]) => TResult, ...args: any[]): Promise<TResult>;
    findElements(selector: string, parent?: TElement): Promise<TElement[]>;
    takeScreenshot(): Promise<string>;
    type(element: TElement, text: string, delay: number): Promise<void>;
}
/**
 * `import {Action} from '@pageobject/class';`
 */
export declare type Action<TComponent extends PageObject<TComponent>> = (component: TComponent) => Promise<void>;
/**
 * `import {Predicate} from '@pageobject/class';`
 */
export declare type Predicate<TComponent extends PageObject<TComponent>> = (component: TComponent, index: number, components: TComponent[]) => Promise<boolean>;
/**
 * `import {ClickOptions} from '@pageobject/class';`
 */
export interface ClickOptions {
    readonly scrollIntoView?: boolean;
}
/**
 * `import {ConstructorOptions} from '@pageobject/class';`
 */
export interface ConstructorOptions<TComponent extends PageObject<TComponent>> {
    readonly element?: object;
    readonly parent?: PageObject<any>;
    readonly predicate?: Predicate<TComponent>;
}
/**
 * `import {TypeOptions} from '@pageobject/class';`
 */
export interface TypeOptions {
    readonly delay?: number;
}
/**
 * `import {ComponentClass} from '@pageobject/class';`
 */
export interface ComponentClass<TComponent extends PageObject<TComponent>> {
    readonly selector: string;
    new (adapter: Adapter<object>, options?: ConstructorOptions<TComponent>): TComponent;
}
/**
 * `import {PageObject} from '@pageobject/class';`
 */
export declare class PageObject<T extends PageObject<T>> {
    static selectRoot<TComponent extends PageObject<TComponent>>(Component: ComponentClass<TComponent>, adapter: Adapter<object>, predicate?: Predicate<TComponent>): TComponent;
    private readonly _Component;
    private readonly _adapter;
    private readonly _options;
    constructor(adapter: Adapter<object>, options?: ConstructorOptions<T>);
    getNumberOfDescendants<TComponent extends PageObject<TComponent>>(Component: ComponentClass<TComponent>, predicate?: Predicate<TComponent>): Promise<number>;
    selectDescendant<TComponent extends PageObject<TComponent>>(Component: ComponentClass<TComponent>, predicate?: Predicate<TComponent>): TComponent;
    click(options?: ClickOptions): Promise<void>;
    focus(): Promise<void>;
    type(text: string, options?: TypeOptions): Promise<void>;
    getAttribute(name: string): Promise<string>;
    getHtml(): Promise<string>;
    getProperty<TValue>(name: string): Promise<TValue>;
    setProperty<TValue>(name: string, value: TValue): Promise<void>;
    getTagName(): Promise<string>;
    getText(): Promise<string>;
    getUrl(): Promise<string>;
    isVisible(): Promise<boolean>;
    waitUntil(action: Action<T>, callback: (errorScreenshot: string) => Promise<void>): Promise<this>;
    toString(): string;
    private _findElement();
    private _findElements();
    private _scrollIntoView();
}
